Get " handshake " fragment to server:  286                      : Client_Hello
Get " handshake " fragment to server:  262                      : Client_Key_Exchange
Get " change_cipher_spec " fragment to server:  1      : Change_Cipher_Spec
Get " handshake " fragment to server:  64                        : Finished
Get " application_data " fragment to server:  128     : Application_Data
Get " alert " fragment to server:  48                                  : Alert
Get " handshake " fragment from server:  87                    : Server_Hello
Get " handshake " fragment from server:  2144                : Certificate
Get " handshake " fragment from server:  4                      : Server_Hello_Done
Get " change_cipher_spec " fragment from server:  1 : Change_Cipher_Spec
Get " handshake " fragment from server:  64                    : Finished
Get " application_data " fragment from server:  416 :Application_Data
Get " alert " fragment from server:  48                              : Alert
---------------------------------------------------------------------------
handshake_typelist = {
          0:'hello_request'\
          ,1:'client_hello'\
          ,2:'server_hello'\
          ,11:'certificate'\
          ,12:'server_key_exchange'\
          ,13:'certificate_request'\
          ,14:'server_hello_done'\
          ,15:'certificate_verify'\
          ,16:'client_key_exchange'\
          ,20:'finished'\
          ,255:'Hello world'\
          }
content_typelist = {
          20:'change_cipher_spec'\
          , 21:'alert'\
          , 22:'handshake'\
          , 23:'application_data'\
          , 255 :'Hello world'\
          }
 --------------------------------------------------------------------------
enum {
   change_cipher_spec(20), alert(21), handshake(22),
   application_data(23), (255)
} ContentType;
--------------------------------------------------------------------------
struct {
   ContentType type;
   ProtocolVersion version;
   uint16 length;
   opaque fragment[TLSPlaintext.length];
} TLSPlaintext;
--------------------------------------------------------------------------
 enum {
          hello_request(0), client_hello(1), server_hello(2),
          certificate(11), server_key_exchange (12),
          certificate_request(13), server_hello_done(14),
          certificate_verify(15), client_key_exchange(16),
          finished(20), (255)
      } HandshakeType;
--------------------------------------------------------------------------
      struct {
          HandshakeType msg_type;    /* handshake type */
          uint24 length;             /* bytes in message */
          select (HandshakeType) {
              case hello_request:       HelloRequest;
              case client_hello:        ClientHello;
              case server_hello:        ServerHello;
              case certificate:         Certificate;
              case server_key_exchange: ServerKeyExchange;
              case certificate_request: CertificateRequest;
              case server_hello_done:   ServerHelloDone;
              case certificate_verify:  CertificateVerify;
              case client_key_exchange: ClientKeyExchange;
              case finished:            Finished;
          } body;
      } Handshake;
--------------------------------------------------------------------------
struct {
    ProtocolVersion client_version;
    Random random;
    SessionID session_id;
    CipherSuite cipher_suites<2..2^16-2>;
    CompressionMethod compression_methods<1..2^8-1>;
    select (extensions_present) {
        case false:
            struct {};
        case true:
            Extension extensions<0..2^16-1>;
    };
} ClientHello;
--------------------------------------------------------------------------
struct {
    ProtocolVersion server_version;
    Random random;
    SessionID session_id;
    CipherSuite cipher_suite;
    CompressionMethod compression_method;
    select (extensions_present) {
        case false:
            struct {};
        case true:
            Extension extensions<0..2^16-1>;
    };
} ServerHello;
--------------------------------------------------------------------------
struct {
          select (KeyExchangeAlgorithm) {
              case rsa:
                  EncryptedPreMasterSecret;
              case dhe_dss:
              case dhe_rsa:
              case dh_dss:
              case dh_rsa:
              case dh_anon:
                  ClientDiffieHellmanPublic;
          } exchange_keys;
      } ClientKeyExchange;
--------------------------------------------------------------------------
   struct {
       ContentType type;
       ProtocolVersion version;
       uint16 length;
       select (SecurityParameters.cipher_type) {
           case stream: GenericStreamCipher;
           case block:  GenericBlockCipher;
           case aead:   GenericAEADCipher;
       } fragment;
   } TLSCiphertext;
--------------------------------------------------------------------------
   struct {
      opaque nonce_explicit[SecurityParameters.record_iv_length];
      aead-ciphered struct {
          opaque content[TLSCompressed.length];
      };
   } GenericAEADCipher;
--------------------------------------------------------------------------